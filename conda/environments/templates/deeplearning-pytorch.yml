# ==============================================================================
# 深度学习PyTorch环境模板
# 适用于：深度学习研究、计算机视觉、神经网络开发、模型训练
# 包含：完整PyTorch生态 + CV工具 + 模型训练 + 实验管理
# Python 版本：参数化支持 3.9-3.12
# ==============================================================================

# 💻 系统配置要求
# 最低配置：16GB RAM, 6GB 可用磁盘空间, GTX 1060+ (6GB VRAM)
# 推荐配置：32GB RAM, 10GB 可用磁盘空间, RTX 3080+ (12GB VRAM)
# 高性能配置：64GB+ RAM, 20GB+ 可用磁盘空间, RTX 4090/A100+ (24GB+ VRAM)
# 包大小估算：~4.5GB (完整深度学习开发工具链)
# 支持系统：Windows 10+, macOS 11+, Linux (Ubuntu 20.04+)
# 安装时间：25-45分钟 (取决于网络速度和GPU驱动)
# GPU要求：NVIDIA GPU (CUDA 11.8+) 强烈推荐，支持CPU训练
# 特殊说明：深度学习训练对显存要求较高，建议8GB+ VRAM

name: deeplearning-pytorch{{ '-' + suffix if suffix else '' }}

channels:
  - pytorch
  - conda-forge
  - nvidia
  - defaults

dependencies:
  # -----------------------------------------------------------------------------
  # 核心 Python 环境
  # -----------------------------------------------------------------------------
  - python={{ python_version }}.*           # Python 解释器
  - pip                                      # Python 包管理器

  # -----------------------------------------------------------------------------
  # PyTorch 深度学习框架核心
  # -----------------------------------------------------------------------------
  - pytorch>=2.1,<3.0                       # PyTorch 核心框架
  - torchvision>=0.16,<1.0                  # 计算机视觉工具包
  - torchaudio>=2.1,<3.0                    # 音频处理工具包
  - pytorch-cuda=11.8                       # CUDA 支持 (GPU加速)
  - cudatoolkit>=11.8,<12.0                 # CUDA 工具包

  # -----------------------------------------------------------------------------
  # Jupyter 开发环境 (深度学习实验必需)
  # -----------------------------------------------------------------------------
  - jupyter>=1.0,<2.0                       # Jupyter 核心
  - jupyterlab>=4.0,<5.0                   # 现代开发界面
  - ipywidgets>=8.0,<9.0                   # 交互式组件
  - ipykernel>=6.20,<7.0                   # Jupyter 内核

  # -----------------------------------------------------------------------------
  # 数据处理和数值计算
  # -----------------------------------------------------------------------------
  - numpy>=1.21,<2.0                       # 数值计算基础
  - pandas>=1.5,<3.0                       # 数据处理和分析
  - scipy>=1.9,<2.0                        # 科学计算库

  # -----------------------------------------------------------------------------
  # 图像和视觉处理 (CV核心工具)
  # -----------------------------------------------------------------------------
  - opencv>=4.8,<5.0                       # 计算机视觉库
  - pillow>=9.0,<11.0                      # Python图像处理库
  - imageio>=2.25,<3.0                     # 图像输入输出

  # -----------------------------------------------------------------------------
  # 可视化工具 (训练监控和结果展示)
  # -----------------------------------------------------------------------------
  - matplotlib>=3.5,<4.0                   # 基础绘图
  - seaborn>=0.11,<1.0                     # 统计可视化
  - plotly>=5.10,<6.0                      # 交互式可视化

  # -----------------------------------------------------------------------------
  # 机器学习基础 (特征提取和预处理)
  # -----------------------------------------------------------------------------
  - scikit-learn>=1.1,<2.0                 # 经典机器学习算法
  - scikit-image>=0.19,<1.0                # 图像处理和分析

  # -----------------------------------------------------------------------------
  # 系统监控和性能工具
  # -----------------------------------------------------------------------------
  - psutil>=5.9,<6.0                       # 系统资源监控
  - tqdm>=4.64,<5.0                        # 进度条显示

  # -----------------------------------------------------------------------------
  # 配置和工具
  # -----------------------------------------------------------------------------
  - pyyaml>=6.0,<7.0                       # YAML 配置文件处理
  - requests>=2.28,<3.0                    # HTTP 请求库

  # -----------------------------------------------------------------------------
  # 基础开发工具
  # -----------------------------------------------------------------------------
  - black>=23.0,<25.0                      # 代码格式化工具
  - pytest>=7.2,<9.0                      # 测试框架
  - ipython>=8.10,<9.0                    # 增强的交互式 Python shell

  # -----------------------------------------------------------------------------
  # pip 依赖 (深度学习专用工具生态)
  # -----------------------------------------------------------------------------
  - pip:
    # =========================================================================
    # 🎯 深度学习训练和优化
    # =========================================================================
    - lightning>=2.1,<3.0                   # PyTorch Lightning (训练框架)
    - torchmetrics>=1.2,<2.0                # 深度学习指标计算
    - torch-summary>=1.4,<2.0               # 模型结构可视化
    - torchinfo>=1.8,<2.0                   # 增强的模型信息显示

    # =========================================================================
    # 🖼️ 计算机视觉增强工具
    # =========================================================================
    - timm>=0.9,<1.0                        # 图像模型库 (预训练模型)
    - albumentations>=1.3,<2.0              # 图像数据增强
    - kornia>=0.7,<1.0                      # 可微分计算机视觉库
    - opencv-python>=4.8,<5.0               # OpenCV Python 接口

    # =========================================================================
    # 📊 实验管理和可视化
    # =========================================================================
    - wandb>=0.16,<1.0                      # 实验跟踪和可视化
    - tensorboard>=2.14,<3.0                # TensorBoard 可视化
    - mlflow>=2.8,<3.0                      # 模型生命周期管理

    # =========================================================================
    # 🎨 图像生成和处理
    # =========================================================================
    - diffusers>=0.24,<1.0                  # 扩散模型库 (Stable Diffusion等)
    - controlnet-aux>=0.0.7,<1.0            # ControlNet 辅助工具

    # =========================================================================
    # 🔧 模型优化和部署
    # =========================================================================
    - onnx>=1.15,<2.0                       # 开放神经网络交换格式
    - onnxruntime>=1.16,<2.0                # ONNX 运行时
    - torchscript>=1.0,<2.0                 # PyTorch 脚本化
    - openvino>=2023.0,<2025.0              # Intel 推理优化引擎

    # =========================================================================
    # 📈 高级训练技术
    # =========================================================================
    - accelerate>=0.25,<1.0                 # 分布式训练加速
    - deepspeed>=0.12,<1.0                  # 大模型训练内存优化 (可选)
    - fairscale>=0.4,<1.0                   # Facebook 大规模训练工具

    # =========================================================================
    # 🔄 MLOps 和模型生命周期管理
    # =========================================================================
    - dvc>=3.0,<4.0                         # 数据版本控制和管道
    - great-expectations>=0.17,<1.0         # 数据质量验证
    - evidently>=0.4,<1.0                   # 模型监控和漂移检测
    - bentoml>=1.1,<2.0                     # 模型服务化框架
    - feast>=0.34,<1.0                      # 特征存储

    # =========================================================================
    # 🏗️ 企业级数据工程
    # =========================================================================
    - ray[default]>=2.7,<3.0                # 分布式计算和ML
    - dask[complete]>=2023.10,<2025.0       # 大数据处理
    - prefect>=2.13,<3.0                    # 现代数据工作流
    - pandera>=0.17,<1.0                    # 数据验证框架

    # =========================================================================
    # ⚡ 高性能推理和部署
    # =========================================================================
    - tensorrt>=8.6,<9.0                    # NVIDIA高性能推理
    - torch-tensorrt>=1.4,<2.0              # PyTorch TensorRT集成
    - triton-client>=2.37,<3.0              # NVIDIA Triton推理服务
    - onnxruntime-gpu>=1.16,<2.0            # ONNX GPU推理引擎

    # =========================================================================
    # 🔒 企业级安全和合规
    # =========================================================================
    - opacus>=1.4,<2.0                      # 差分隐私训练
    - aif360>=0.5,<1.0                      # AI公平性工具包
    - adversarial-robustness-toolbox>=1.15,<2.0  # 对抗性攻击防护

    # =========================================================================
    # 🧪 专业开发工程化
    # =========================================================================
    - mypy>=1.0,<2.0                        # 静态类型检查
    - sphinx>=6.0,<8.0                      # 文档生成
    - pre-commit>=3.0,<4.0                  # Git钩子管理
    - hypothesis>=6.82,<7.0                 # 属性测试框架
    - nbstripout>=0.6,<1.0                  # Jupyter清理工具

    # =========================================================================
    # ☁️ 云原生和容器化
    # =========================================================================
    - docker>=6.1,<7.0                      # Docker Python SDK
    - kubernetes>=27.2,<28.0                # Kubernetes Python客户端
    - mlflow-skinny>=2.8,<3.0               # 轻量级MLflow (避免依赖冲突)

    # =========================================================================
    # 🎵 音频和多模态处理
    # =========================================================================
    - librosa>=0.10,<1.0                    # 音频处理和分析
    - soundfile>=0.12,<1.0                  # 音频文件读写

    # =========================================================================
    # 📊 数据加载和预处理
    # =========================================================================
    - datasets>=2.15,<3.0                   # HuggingFace 数据集 (通用数据集)
    - webdataset>=0.2.5,<1.0                # 大规模数据集处理
    - torchdata>=0.7,<1.0                   # PyTorch数据处理管道

    # =========================================================================
    # 🎮 强化学习 (基础支持)
    # =========================================================================
    - gymnasium>=0.29,<1.0                  # 现代强化学习环境
    - stable-baselines3>=2.0,<3.0           # 强化学习算法实现

    # =========================================================================
    # 🔍 模型解释和分析
    # =========================================================================
    - captum>=0.6,<1.0                      # PyTorch 模型解释工具
    - grad-cam>=1.4,<2.0                    # 梯度类激活映射可视化

    # =========================================================================
    # 🌐 Web界面和演示
    # =========================================================================
    - gradio>=4.0,<5.0                      # 快速原型和演示界面
    - streamlit>=1.28,<2.0                  # Web 应用框架

    # =========================================================================
    # 🔧 实用工具和增强
    # =========================================================================
    - rich>=13.0,<14.0                      # 美化终端输出
    - click>=8.0,<9.0                       # 命令行工具开发
    - fire>=0.5,<1.0                        # 命令行工具快速生成
    - omegaconf>=2.3,<3.0                   # 配置文件处理
    - hydra-core>=1.3,<2.0                  # 配置管理框架

    # =========================================================================
    # 📦 数据存储和处理
    # =========================================================================
    - h5py>=3.8,<4.0                        # HDF5 数据格式
    - zarr>=2.14,<3.0                       # 高性能数组存储

    # =========================================================================
    # 🚀 GPU监控和性能工具
    # =========================================================================
    - gpustat>=1.1,<2.0                     # GPU 使用监控
    - pynvml>=11.4,<12.0                    # NVIDIA GPU 管理接口

# ==============================================================================
# 环境说明
# ==============================================================================
# 
# 🎯 适用场景：
#   - 企业级深度学习研发平台
#   - 完整的ML工程和MLOps流水线
#   - 大规模模型训练和部署
#   - 生产级深度学习应用
#   - 跨团队的ML标准化开发
#
# 🚀 核心能力：
#   - ✅ 完整的 PyTorch 生态系统 (torch + torchvision + torchaudio)
#   - ✅ 企业级 MLOps 流水线 (dvc + mlflow + feast + great-expectations)
#   - ✅ 现代训练框架 (Lightning + accelerate + ray + dask)
#   - ✅ 高性能推理部署 (tensorrt + triton + onnx + bentoml)
#   - ✅ 丰富的预训练模型 (timm + diffusers)
#   - ✅ 专业CV工具 (albumentations + kornia + opencv)
#   - ✅ 实验管理和监控 (wandb + tensorboard + mlflow + evidently)
#   - ✅ 企业级安全合规 (opacus + aif360 + adversarial-robustness)
#   - ✅ 云原生部署 (docker + kubernetes + 分布式计算)
#   - ✅ 专业开发工程化 (mypy + sphinx + pre-commit + hypothesis)
#
# 🏢 企业级特征：
#   - 🔄 端到端MLOps：从数据到部署的完整流程自动化
#   - 📊 数据质量保障：数据验证、监控、血缘追踪
#   - 🚀 生产级推理：高性能、可扩展的模型服务化
#   - 🔒 合规性保障：AI伦理、公平性、可解释性、隐私保护
#   - ☁️ 云原生架构：容器化、分布式、多云部署支持
#   - 📈 业务监控：模型漂移检测、性能监控、A/B测试
#
# 🔧 典型企业级工作流：
#   conda activate my-enterprise-dl
#   jupyter lab                             # 启动开发环境
#   # 1. 数据工程 (dvc + great-expectations + feast)
#   # 2. 模型开发 (Lightning + 分布式训练)
#   # 3. 实验管理 (mlflow + wandb + evidently)
#   # 4. 模型优化 (tensorrt + 量化 + 剪枝)
#   # 5. 服务化部署 (bentoml + triton + kubernetes)
#   # 6. 生产监控 (模型漂移 + 性能指标)
#
# 🎮 企业级快速开始：
#   # MLOps 数据管道
#   import dvc.api
#   import great_expectations as ge
#   
#   # 数据版本控制和验证
#   data = dvc.api.get_url('data/train.csv', repo='.')
#   context = ge.get_context()
#   suite = context.get_expectation_suite("train_data_suite")
#   
#   # 分布式训练
#   import ray
#   import lightning as L
#   
#   @ray.remote(num_gpus=1)
#   class DistributedTrainer:
#       def train(self, config):
#           trainer = L.Trainer(accelerator='gpu', strategy='ddp')
#           return trainer.fit(model, dataloader)
#   
#   # 模型服务化
#   import bentoml
#   from bentoml.io import NumpyNdarray, JSON
#   
#   @bentoml.service
#   class ImageClassifier:
#       @bentoml.api
#       def predict(self, image: NumpyNdarray) -> JSON:
#           return {"prediction": self.model(image)}
#   
#   # 模型监控
#   from evidently import ColumnMapping
#   from evidently.report import Report
#   
#   report = Report(metrics=[DataDriftPreset()])
#   report.run(reference_data=train_data, current_data=prod_data)
#
# 📈 与其他模板的关系：
#   - 基础层：包含 machinelearning.yml 的数据科学基础
#   - 专门化：专注深度学习，企业级MLOps能力
#   - 升级路径：可升级到 ai-llm.yml (大语言模型专用)
#   - 集成可能：可与 web-fastapi.yml 结合进行模型API服务
#
# 💾 存储需求：
#   - 环境本身: ~5.5GB (企业级完整深度学习工具链)
#   - 预训练模型缓存: 10-50GB (取决于使用的模型)
#   - 数据集和特征存储: 根据项目需求 (100GB-10TB)
#   - 实验日志和模型版本: 10-100GB (取决于实验规模)
#   - 容器镜像和部署: 5-20GB (生产环境)
#   - 建议预留: 200GB+ (企业级用途)
#
# 🔧 硬件建议：
#   # 开发和小规模训练
#   RTX 3080 (12GB) + 32GB RAM + NVMe SSD
#   
#   # 企业级训练和部署
#   RTX 4090 (24GB) + 64GB RAM + 高速NVMe SSD
#   A100 (40GB/80GB) + 128GB+ RAM (服务器环境)
#   
#   # 大规模生产部署
#   多GPU集群 + Kubernetes + 分布式存储
#
# 🌟 企业级特色功能：
#   - 🧠 支持主流CV任务和自定义架构
#   - ⚡ 现代MLOps技术栈 (数据工程 + 模型工程)
#   - 🔍 完整的可观测性 (数据质量 + 模型性能 + 业务指标)
#   - 📊 企业级实验管理 (版本控制 + 对比分析 + 报告)
#   - 🚀 生产就绪部署 (高性能推理 + 自动扩缩容)
#   - 🔒 安全合规保障 (隐私保护 + 模型安全 + 审计)
#
# 🎯 可选垂直领域扩展：
#   # 计算机视觉专业工具
#   pip install detectron2                  # Facebook目标检测框架
#   
#   # 图神经网络
#   pip install torch-geometric>=2.4,<3.0  # 图神经网络库
#   
#   # 医学影像AI
#   pip install monai>=1.3,<2.0            # 医学影像AI框架
#   
#   # 3D计算机视觉
#   pip install pytorch3d>=0.7,<1.0        # 3D计算机视觉
#   
#   # 模型优化工具
#   pip install torch-pruning>=1.3,<2.0    # 模型剪枝
#   pip install pytorch-quantization>=2.1,<3.0  # 量化工具
#
# 📚 学习资源：
#   - PyTorch 官方教程: https://pytorch.org/tutorials/
#   - Lightning 文档: https://lightning.ai/docs/pytorch/
#   - MLOps 最佳实践: https://ml-ops.org/
#   - DVC 教程: https://dvc.org/doc
#   - Ray 分布式计算: https://docs.ray.io/