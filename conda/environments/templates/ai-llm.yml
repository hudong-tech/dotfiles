# ==============================================================================
# 大模型AI开发环境模板
# 适用于：LLM开发、AI对话系统、多模态AI、模型微调、RAG系统
# Python 版本：参数化支持 3.9-3.12
# ==============================================================================

# 💻 系统配置要求
# 最低配置：32GB RAM, 8GB 可用磁盘空间, RTX 3060+ (12GB VRAM)
# 推荐配置：64GB RAM, 20GB 可用磁盘空间, RTX 4090 (24GB VRAM)
# 高性能配置：128GB+ RAM, 50GB+ 可用磁盘空间, A100/H100 (80GB VRAM)
# 包大小估算：~6.5GB (完整的企业级LLM开发工具链)
# 支持系统：Windows 11+, macOS 12+, Linux (Ubuntu 20.04+)
# 安装时间：30-60分钟 (取决于网络速度和GPU驱动)
# GPU要求：NVIDIA GPU (CUDA 11.8+) 强烈建议
# 特殊说明：大模型训练和推理对显存要求极高，建议24GB+ VRAM

name: ai-llm{{ '-' + suffix if suffix else '' }}

channels:
  - conda-forge
  - pytorch
  - nvidia
  - defaults

dependencies:
  # -----------------------------------------------------------------------------
  # 核心 Python 环境
  # -----------------------------------------------------------------------------
  - python={{ python_version }}.*           # Python 解释器
  - pip                                      # Python 包管理器

  # -----------------------------------------------------------------------------
  # 深度学习框架基础
  # -----------------------------------------------------------------------------
  - pytorch>=2.1,<3.0                       # PyTorch 核心框架
  - torchvision>=0.16,<1.0                  # 计算机视觉支持
  - torchaudio>=2.1,<3.0                    # 音频处理支持
  - pytorch-cuda=11.8                       # CUDA 支持 (GPU加速)

  # -----------------------------------------------------------------------------
  # Jupyter 开发环境 (AI实验必需)
  # -----------------------------------------------------------------------------
  - jupyter>=1.0,<2.0                       # Jupyter 核心
  - jupyterlab>=4.0,<5.0                   # 现代开发界面
  - ipywidgets>=8.0,<9.0                   # 交互式组件

  # -----------------------------------------------------------------------------
  # 数据处理基础 (AI数据预处理)
  # -----------------------------------------------------------------------------
  - numpy>=1.21,<2.0                       # 数值计算基础
  - pandas>=1.5,<3.0                       # 数据处理和分析
  - scipy>=1.9,<2.0                        # 科学计算库

  # -----------------------------------------------------------------------------
  # 可视化工具 (训练监控和结果展示)
  # -----------------------------------------------------------------------------
  - matplotlib>=3.5,<4.0                   # 基础绘图
  - seaborn>=0.11,<1.0                     # 统计可视化
  - plotly>=5.10,<6.0                      # 交互式可视化

  # -----------------------------------------------------------------------------
  # 系统监控和性能工具
  # -----------------------------------------------------------------------------
  - psutil>=5.9,<6.0                       # 系统资源监控
  - tqdm>=4.64,<5.0                        # 进度条显示

  # -----------------------------------------------------------------------------
  # 基础开发工具
  # -----------------------------------------------------------------------------
  - black>=23.0,<25.0                      # 代码格式化工具
  - pytest>=7.2,<9.0                      # 测试框架
  - ipython>=8.10,<9.0                    # 增强的交互式 Python shell

  # -----------------------------------------------------------------------------
  # pip 依赖 (LLM 专用工具生态)
  # -----------------------------------------------------------------------------
  - pip:
    # =========================================================================
    # 🤖 Transformer 和 LLM 核心生态
    # =========================================================================
    - transformers>=4.35,<5.0               # HuggingFace Transformers 核心库
    - tokenizers>=0.15,<1.0                 # 快速 tokenization
    - datasets>=2.15,<3.0                   # 数据集处理和加载
    - evaluate>=0.4,<1.0                    # 模型评估工具

    # =========================================================================
    # ⚡ 大模型训练优化和加速
    # =========================================================================
    - accelerate>=0.25,<1.0                 # 分布式训练和推理加速
    - deepspeed>=0.12,<1.0                  # 大模型训练内存优化
    - bitsandbytes>=0.41,<1.0               # 模型量化和优化

    # =========================================================================
    # 🎯 参数高效微调 (PEFT)
    # =========================================================================
    - peft>=0.7,<1.0                        # LoRA, AdaLoRA 等微调方法
    - trl>=0.7,<1.0                         # 强化学习微调 (RLHF/DPO)

    # =========================================================================
    # 📊 实验管理和监控
    # =========================================================================
    - wandb>=0.16,<1.0                      # 实验跟踪和可视化
    - mlflow>=2.8,<3.0                      # 模型生命周期管理
    - tensorboard>=2.14,<3.0                # 训练可视化
    - gpustat>=1.1,<2.0                     # GPU 使用监控

    # =========================================================================
    # 🌐 API 服务和部署
    # =========================================================================
    - fastapi>=0.104,<1.0                   # 高性能 API 框架
    - uvicorn[standard]>=0.24,<1.0          # ASGI 服务器
    - gradio>=4.0,<5.0                      # 快速原型和演示界面
    - streamlit>=1.28,<2.0                  # Web 应用框架

    # =========================================================================
    # 🔍 向量检索和 RAG 支持
    # =========================================================================
    - sentence-transformers>=2.2,<3.0       # 文本向量化
    - faiss-cpu>=1.7,<2.0                   # 高效向量相似度搜索
    - chromadb>=0.4,<1.0                    # 向量数据库
    - langchain>=0.0.340,<1.0               # LLM 应用开发框架

    # =========================================================================
    # 📝 自然语言处理增强工具
    # =========================================================================
    - nltk>=3.8,<4.0                        # 传统 NLP 工具包
    - spacy>=3.7,<4.0                       # 现代 NLP 库
    - openai>=1.3,<2.0                      # OpenAI API 客户端

    # =========================================================================
    # 🎨 多模态 AI 支持
    # =========================================================================
    - pillow>=9.0,<11.0                     # 图像处理
    - librosa>=0.10,<1.0                    # 音频处理和分析
    - opencv-python>=4.8,<5.0               # 计算机视觉

    # =========================================================================
    # 🔧 配置管理和工具增强
    # =========================================================================
    - hydra-core>=1.3,<2.0                  # 配置管理框架
    - omegaconf>=2.3,<3.0                   # 配置文件处理
    - fire>=0.5,<1.0                        # 命令行工具快速生成
    - python-multipart>=0.0.6,<1.0          # 文件上传支持 (FastAPI)

    # =========================================================================
    # 📊 大数据处理增强
    # =========================================================================
    - pyarrow>=12.0,<16.0                   # 高性能数据处理 (Parquet, Arrow)
    - polars>=0.20,<1.0                     # 高性能数据帧库
    - dask[complete]>=2023.12,<2025.0       # 分布式计算框架

    # =========================================================================
    # 🌐 云服务和存储集成
    # =========================================================================
    - boto3>=1.28,<2.0                      # AWS服务集成
    - azure-storage-blob>=12.19,<13.0       # Azure Blob存储
    - google-cloud-storage>=2.10,<3.0       # Google Cloud存储

    # =========================================================================
    # 📊 评估和基准测试
    # =========================================================================
    - lm-eval>=0.4,<1.0                     # 大模型评估框架
    - deepeval>=0.21,<1.0                   # LLM应用评估工具
    - ragas>=0.1,<1.0                       # RAG系统评估工具

    # =========================================================================
    # 🔧 实用工具和数据处理
    # =========================================================================
    - requests>=2.28,<3.0                   # HTTP 请求
    - beautifulsoup4>=4.11,<5.0             # 网页数据解析
    - PyYAML>=6.0,<7.0                      # YAML 配置文件处理
    - rich>=13.0,<14.0                      # 美化终端输出
    - click>=8.0,<9.0                       # 命令行工具开发

    # =========================================================================
    # 🚀 高性能推理和服务引擎
    # =========================================================================
    - vllm>=0.7,<1.0                        # 高性能LLM推理和服务引擎
    - optimum>=1.14,<2.0                    # 模型优化工具 (ONNX, OpenVINO)
    - onnx>=1.15,<2.0                       # 开放神经网络交换格式
    - safetensors>=0.4,<1.0                 # 安全的张量序列化

    # =========================================================================
    # 🎛️ 高级量化和压缩
    # =========================================================================
    - auto-gptq>=0.5,<1.0                   # GPTQ量化算法 (权重量化)
    - autoawq>=0.1.8,<1.0                   # AWQ量化算法 (激活感知量化)
    - llm-compressor>=0.1,<1.0              # 统一模型压缩库 (vLLM原生支持)

    # =========================================================================
    # 🎤 多模态AI增强 (语音和视觉)
    # =========================================================================
    - openai-whisper>=20231117              # OpenAI语音识别模型
    - diffusers>=0.24,<1.0                  # 扩散模型库 (图像生成)
    - timm>=0.9,<1.0                        # 图像模型库

# ==============================================================================
# 环境说明
# ==============================================================================
# 
# 🎯 适用场景：
#   - 大语言模型 (LLM) 开发和微调
#   - AI 对话系统和智能助手开发
#   - RAG (检索增强生成) 系统构建
#   - 多模态 AI 应用 (文本+图像+音频)
#   - 模型量化和优化部署
#   - AI 产品原型开发和演示
#
# 🚀 核心能力：
#   - ✅ 完整的 LLM 开发工具链 (transformers + datasets + tokenizers)
#   - ✅ 高效模型训练 (accelerate + deepspeed + 分布式)
#   - ✅ 高性能推理服务 (vLLM + optimized kernels)
#   - ✅ 参数高效微调 (LoRA + QLoRA + RLHF)
#   - ✅ 模型量化和优化 (GPTQ + AWQ + bitsandbytes)
#   - ✅ 向量检索和 RAG (sentence-transformers + faiss + chromadb)
#   - ✅ API 服务部署 (fastapi + gradio + streamlit)
#   - ✅ 实验管理和监控 (wandb + mlflow + tensorboard)
#   - ✅ 多模态支持 (图像 + 音频 + 语音处理)
#   - ✅ 数据处理和可视化 (pandas + matplotlib)
#
# 🔧 典型工作流：
#   conda activate my-llm-project
#   jupyter lab                             # 启动开发环境
#   # 1. 数据准备和预处理 (datasets + tokenizers)
#   # 2. 模型加载和配置 (transformers + 预训练模型)
#   # 3. 微调训练 (accelerate + deepspeed + wandb监控)
#   # 4. 模型评估和优化 (evaluate + 量化 + lm-eval)
#   # 5. 高性能部署 (vLLM + fastapi + gradio)
#   # 6. RAG 系统构建 (langchain + 向量数据库)
#
# 🎮 快速开始示例：
#   # 加载预训练模型
#   from transformers import AutoTokenizer, AutoModelForCausalLM
#   model = AutoModelForCausalLM.from_pretrained("meta-llama/Llama-2-7b-hf")
#   
#   # LoRA 微调
#   from peft import get_peft_model, LoraConfig
#   peft_config = LoraConfig(task_type="CAUSAL_LM", r=16, lora_alpha=32)
#   model = get_peft_model(model, peft_config)
#   
#   # 分布式训练
#   from accelerate import Accelerator
#   accelerator = Accelerator()
#   model, optimizer, dataloader = accelerator.prepare(model, optimizer, dataloader)
#   
#   # 高性能推理部署
#   import vllm
#   llm = vllm.LLM(model="meta-llama/Llama-2-7b-hf", quantization="gptq")
#   outputs = llm.generate(["Tell me a joke"], sampling_params=vllm.SamplingParams())
#   
#   # 部署 API 服务
#   import gradio as gr
#   demo = gr.ChatInterface(fn=chat_function)
#   demo.launch()
#
# 📈 与其他模板的关系：
#   - 基于 deeplearning-pytorch.yml 的核心能力
#   - 专门优化用于大模型和生成式 AI
#   - 可与 web-fastapi.yml 结合用于生产部署
#   - 包含完整的数据科学基础工具
#
# 💾 存储需求：
#   - 环境本身: ~6.5GB (增加了高性能推理和量化工具)
#   - 预训练模型 (7B): ~15GB
#   - 预训练模型 (13B): ~30GB  
#   - 预训练模型 (70B): ~150GB
#   - 建议预留: 100GB+ (用于模型和数据)
#
# 🔧 硬件建议：
#   # 学习和小模型微调 (7B以下)
#   RTX 3060 (12GB) + 32GB RAM
#   
#   # 中等模型开发 (7B-13B)
#   RTX 4090 (24GB) + 64GB RAM
#   
#   # 大模型训练 (70B+)
#   A100 (80GB) + 128GB+ RAM 或多卡设置
#
# 🌟 特色功能：
#   - 🤖 支持主流开源大模型 (Llama, Qwen, ChatGLM, Baichuan, DeepSeek)
#   - ⚡ 内存高效训练 (DeepSpeed ZeRO, Gradient Checkpointing, vLLM推理)
#   - 🎯 参数高效微调 (LoRA, QLoRA, AdaLoRA, IA3)
#   - 🔍 企业级 RAG 系统 (向量数据库 + 语义检索)
#   - 🌐 生产就绪部署 (API + Web界面 + 性能监控)
#   - 🎨 多模态能力 (文本+图像+音频处理)
#
# 📚 学习资源：
#   - Transformers 文档: https://huggingface.co/docs/transformers
#   - DeepSpeed 教程: https://www.deepspeed.ai/tutorials/
#   - LangChain 指南: https://python.langchain.com/docs/
#   - PEFT 教程: https://huggingface.co/docs/peft