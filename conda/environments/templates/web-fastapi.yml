# ==============================================================================
# 现代 API 开发环境
# 核心定位：现代 Web API 开发，微服务架构
# 目标用户：后端开发者、API 开发者、微服务工程师
# 工作流程：API 设计 → 开发 → 测试 → 文档 → 部署
# Python 版本：3.9 / 3.10 / 3.11（参数化支持）
# ==============================================================================

# 💻 系统配置要求
# 最低配置：4GB RAM, 2GB 可用磁盘空间
# 推荐配置：8GB RAM, 4GB 可用磁盘空间
# 生产环境：16GB+ RAM, 10GB+ 可用磁盘空间 (高并发部署)
# 包大小估算：~1.2GB (现代 API 开发工具链)
# 支持系统：Windows 10+, macOS 10.14+, Linux (Ubuntu 18.04+)
# 安装时间：10-20分钟 (取决于网络速度)
# CPU建议：四核+ 处理器 (并发请求处理)
# 特殊说明：开发阶段需要稳定网络连接 (API 测试和调试)

name: web-fastapi-{{PYTHON_VERSION}}

channels:
  - conda-forge
  - defaults

dependencies:
  # -----------------------------------------------------------------------------
  # 核心 Python 环境
  # -----------------------------------------------------------------------------
  - python={{PYTHON_VERSION}}.*      # Python 解释器（参数化版本）
  - pip                              # Python 包管理器

  # -----------------------------------------------------------------------------
  # Web 框架核心
  # -----------------------------------------------------------------------------
  - fastapi>=0.100,<1.0              # 现代异步 Web 框架
  - uvicorn>=0.20,<1.0               # ASGI 服务器
  - starlette>=0.27,<1.0             # FastAPI 底层框架

  # -----------------------------------------------------------------------------
  # 数据验证和序列化
  # -----------------------------------------------------------------------------
  - pydantic>=2.0,<3.0               # 数据验证和设置管理
  - email-validator>=2.0,<3.0       # 邮箱验证支持
  - orjson>=3.8,<4.0                 # 高性能 JSON 序列化
  - msgpack>=1.0,<2.0                # 高效二进制序列化

  # -----------------------------------------------------------------------------
  # 数据库和 ORM
  # -----------------------------------------------------------------------------
  - sqlalchemy>=2.0,<3.0            # Python SQL 工具包和 ORM
  - alembic>=1.10,<2.0               # 数据库迁移工具
  - psycopg2>=2.9,<3.0               # PostgreSQL 适配器
  - asyncpg>=0.27,<1.0               # 异步 PostgreSQL 驱动

  # -----------------------------------------------------------------------------
  # HTTP 客户端和网络
  # -----------------------------------------------------------------------------
  - httpx>=0.24,<1.0                 # 现代异步 HTTP 客户端
  - requests>=2.28,<3.0              # 传统 HTTP 请求库
  - aiofiles>=23.0,<24.0             # 异步文件操作
  - python-multipart>=0.0.6,<1.0    # 文件上传支持

  # -----------------------------------------------------------------------------
  # 认证和安全
  # -----------------------------------------------------------------------------
  - python-jose>=3.3,<4.0           # JWT 令牌处理
  - passlib>=1.7,<2.0               # 密码哈希处理
  - cryptography>=40.0,<42.0        # 加密库
  - bcrypt>=4.0,<5.0                 # 密码哈希算法

  # -----------------------------------------------------------------------------
  # API 开发工具
  # -----------------------------------------------------------------------------
  - python-dotenv>=1.0,<2.0         # 环境变量管理
  - python-dateutil>=2.8,<3.0       # 日期时间处理

  # -----------------------------------------------------------------------------
  # 测试工具
  # -----------------------------------------------------------------------------
  - pytest>=7.2,<9.0                # 测试框架
  - pytest-asyncio>=0.21,<1.0       # 异步测试支持
  - pytest-cov>=4.0,<6.0            # 测试覆盖率

  # -----------------------------------------------------------------------------
  # 监控和日志
  # -----------------------------------------------------------------------------
  - structlog>=23.1,<24.0           # 结构化日志记录
  - prometheus-client>=0.16,<1.0    # 监控指标收集

  # -----------------------------------------------------------------------------
  # 开发工具和 CLI
  # -----------------------------------------------------------------------------
  - typer>=0.9,<1.0                 # CLI 应用框架
  - rich>=13.0,<14.0                # 终端美化和格式化
  # -----------------------------------------------------------------------------
  # 数据验证扩展
  # -----------------------------------------------------------------------------
  - phonenumbers>=8.13,<9.0         # 国际电话号码验证

  # -----------------------------------------------------------------------------
  # 开发工具
  # -----------------------------------------------------------------------------
  - black>=23.0,<25.0                # 代码格式化工具
  - mypy>=1.0,<2.0                   # 静态类型检查
  - ipython>=8.10,<9.0               # 增强的交互式 Python shell

  # -----------------------------------------------------------------------------
  # 配置文件处理
  # -----------------------------------------------------------------------------
  - pyyaml>=6.0,<7.0                 # YAML 配置文件解析
  - toml>=0.10,<1.0                  # TOML 配置文件解析

  # -----------------------------------------------------------------------------
  # pip 依赖（conda 版本可能滞后的包）
  # -----------------------------------------------------------------------------
  - pip:
    - databases[postgresql]>=0.7,<1.0  # 异步数据库支持
    - gunicorn>=20.1,<22.0              # WSGI 服务器（生产环境）
    - redis>=4.5,<5.0                   # Redis 客户端
    - celery>=5.2,<6.0                  # 分布式任务队列
    - fastapi-users>=12.0,<13.0        # 用户认证管理
    - slowapi>=0.1.8,<1.0               # 请求限流

# ==============================================================================
# 环境说明
# ==============================================================================
# 
# 🎯 适用场景：
#   - RESTful API 开发
#   - 微服务架构应用
#   - 异步 Web 应用开发
#   - API 网关和中间件
#   - 现代后端服务开发
#
# 📦 包含功能：
#   - ✅ 现代异步 Web 框架（FastAPI + Uvicorn）
#   - ✅ 完整的数据验证（Pydantic v2）
#   - ✅ 数据库集成（SQLAlchemy + Alembic）
#   - ✅ 异步数据库支持（asyncpg + databases）
#   - ✅ 认证和安全（JWT + 密码哈希）
#   - ✅ 现代 HTTP 客户端（httpx）
#   - ✅ 完整的测试工具链
#   - ✅ 生产环境支持（gunicorn + redis + celery）
#
# 🚀 创建环境：
#   conda_create_from_template web-fastapi myapi 3.10
#   conda_create_from_template web-fastapi microservice 3.11
#
# 📈 升级路径：
#   - Django 项目 → web-django 模板
#   - 机器学习 API → 结合 machinelearning 模板
#   - 数据 API → 结合 datascience 模板
#
# 💡 使用提示：
#   - 开发服务器: uvicorn main:app --reload
#   - 生产服务器: gunicorn main:app -w 4 -k uvicorn.workers.UvicornWorker
#   - API 文档: http://localhost:8000/docs
#   - 专注 API 开发，包含完整的异步支持
#
# 🔧 典型工作流：
#   conda activate myapi
#   # 创建 FastAPI 应用
#   # 定义 Pydantic 模型
#   # 设置数据库连接
#   # 实现 API 端点
#   # 添加认证和安全
#   uvicorn main:app --reload         # 启动开发服务器
#   pytest tests/                     # 运行 API 测试